% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SDForest.r
\name{cv.SDTree}
\alias{cv.SDTree}
\title{Cross-validation for the Spectral Deconfounded Tree}
\usage{
cv.SDTree(
  formula = NULL,
  data = NULL,
  x = NULL,
  y = NULL,
  max_leaves = 50,
  min_sample = 5,
  fast = TRUE,
  Q_type = "trim",
  trim_quantile = 0.5,
  q_hat = 0,
  mc.cores = 1,
  n_cv = 3,
  cp_seq = NULL
)
}
\arguments{
\item{formula}{Object of class \code{formula} or describing the model to fit of the form \code{y ~ x1 + x2 + ...} where \code{y} is a numeric response and \code{x1, x2, ...} are vectors of covariates. Interactions are not supported.}

\item{data}{Training data of class \code{data.frame} containing the variables in the model.}

\item{x}{Predictor data, alternative to \code{formula} and \code{data}.}

\item{y}{Response vector, alternative to \code{formula} and \code{data}.}

\item{max_leaves}{Maximum number of leaves for the grown tree.}

\item{min_sample}{Minimum number of observations per leaf. A split is only performed if both resulting leaves have at least \code{min_sample} observations.}

\item{fast}{If \code{TRUE}, only the optimal splitts in the new leaves are evaluated and the previously optimal splitts and their potential loss-decrease are reused. If \code{FALSE} all possible splitts in all the leaves are reevaluated after every split.}

\item{Q_type}{Type of deconfounding, one of 'trim', 'DDL_trim', 'pca', 'no_deconfounding'. 'trim' corresponds to the Trim transform \insertCite{Cevid2020SpectralModels}{SDForest}, 'DDL_trim' to the implementation of the Doubly debiased lasso \insertCite{Guo2022DoublyConfounding}{SDForest}, 'pca' to the PCA transformation\insertCite{Paul2008PreconditioningProblems}{SDForest} and 'no_deconfounding' to the Identity. See \code{\link{get_Q}}.}

\item{trim_quantile}{Quantile for Trim transform and DDL Trim transform, only needed for trim and DDL_trim, see \code{\link{get_Q}}.}

\item{q_hat}{Assumed confounding dimension, only needed for pca, see \code{\link{get_Q}}.}

\item{mc.cores}{Number of cores to use for parallel computing, if \code{NULL} all available cores - 1 are used.}

\item{n_cv}{Number of folds for cross-validation. It is recommended to not use more than 5 folds if the number of covariates is larger than the number of observations. In this case the spectral transformation could differ to much if the validation data is substantially smaller than the training data.}

\item{cp_seq}{Sequence of complexity parameters cp to compare using cross-validation, if \code{NULL} a sequence from 0 to 0.6 with stepsize 0.002 is used.}

\item{mtry}{Number of randomly selected covariates to consider for a split, if \code{NULL} all covariates are available for each split.}
}
\value{
A list containing
\item{cp_min}{The optimal complexity parameter.}
\item{cp_table}{A table containing the complexity parameter, the mean and the standard deviation of the loss on the validation sets for the complexity parameters. If multiple complexity parameters result in the same loss, only the one with the largest complexity parameter is shown.}
}
\description{
Estimates the optimal complexity parameter for the spectral deconfounded tree using cross-validation. Q is estimated for each training set and validation set separately to ensure independence of the validation set.
}
\examples{
# TODO: add example
}
\references{
\insertAllCited{}
}
\seealso{
\code{\link{SDTree}}
}
\author{
Markus Ulmer
}
